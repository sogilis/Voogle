name: CI-CD

on: [ push ]

jobs:
  CI-Unit-Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      #  LFS Github quota is not really fair, is uses bandwidth even when we use it within the Github Actions CI
      #  So until we've found an alternative, we won't test the video processing part
      #       with:
      #         lfs: "true"
      #     - name: Install FFMPEG
      #       uses: FedericoCarboni/setup-ffmpeg@v1
      - name: API lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45
          working-directory: src/
      - name: Install golang 1.17.0
        uses: actions/setup-go@v2
        with:
          go-version: "^1.17.0"
      - name: API build
        run: go build
        working-directory: src/cmd/api
      - name: Encoder build
        run: go build
        working-directory: src/cmd/encoder
      - name: Unit Tests
        run: make test
        working-directory: src/

  CI-protobuf-checks:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: bufbuild/buf-setup-action@v0.6.0
      - name: Protobuf lint
        uses: bufbuild/buf-lint-action@v1
        with:
          input: "src/"

  CI-webapp-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm install
        working-directory: src/webapp/
      - name: Unit test
        run: npm run test:unit
        working-directory: src/webapp/
      - run: npm run build
        working-directory: src/webapp/

  CI-dockerfile-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make lint-dockerfile

  CI-terraform:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: infra/
        id: init
        run: terraform init -backend=false
      - name: Terraform fmt
        working-directory: infra/
        id: fmt
        run: terraform fmt -check
      - name: Terraform Validate
        working-directory: infra/
        id: validate
        run: terraform validate -no-color

  CD-Tag:
    runs-on: ubuntu-20.04
    needs:
      [
          CI-Unit-Tests,
          CI-protobuf-checks,
          CI-webapp-tests,
          CI-dockerfile-tests,
          CI-terraform,
      ]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Auto increment tag
        id: tag
        uses: sophiware/actions-auto-increment-tag@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  CD-Publish-go:
    strategy:
      fail-fast: true
      matrix:
        services: [ api, encoder ]
    runs-on: ubuntu-20.04
    needs: [ CD-Tag ]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: "Get latest tag"
        id: latestTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push ${{ matrix.services }} Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./src
          file: ./src/cmd/${{matrix.services}}/Dockerfile
          push: true
          tags: ghcr.io/sogilis/voogle-${{ matrix.services }}:latest,ghcr.io/sogilis/voogle-${{ matrix.services }}:${{ steps.latestTag.outputs.tag }}

  CD-Publish-webapp:
    runs-on: ubuntu-20.04
    needs: [ CD-Tag ]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: "Get latest tag"
        id: latestTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Webapp Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./src/webapp
          push: true
          tags: ghcr.io/sogilis/voogle-webapp:latest,ghcr.io/sogilis/voogle-webapp:${{ steps.latestTag.outputs.tag }}

  CD-terraform:
    runs-on: ubuntu-20.04
    needs: [ CD-Publish-go, CD-Publish-webapp ]
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: infra/
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform plan
        working-directory: infra/
        id: plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        Later we will want to uncomment this bit
#      - name: Terraform apply
#        working-directory: infra/
#        id: apply
#        run: terraform apply

  CD-deploy-sqsc:
    needs: [ CD-terraform ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: "Get latest tag"
        id: latestTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Schedule services
        uses: docker://squarescale/cli:gh-actions
        env:
          SQSC_TOKEN: ${{ secrets.SQSC_TOKEN }}
          DOCKER_REPOSITORY: "ghcr.io/sogilis"
          DOCKER_REPOSITORY_TAG: ${{ steps.latestTag.outputs.tag }}
          ORGANIZATION_NAME: ${{ secrets.ORGANIZATION_NAME }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          IAAS_PROVIDER: ${{ secrets.IAAS_PROVIDER }}
          IAAS_REGION: ${{ secrets.IAAS_REGION }}
          IAAS_CRED: ${{ secrets.IAAS_CRED }}
          INFRA_TYPE: ${{ secrets.INFRA_TYPE }}
          NODE_TYPE: ${{ secrets.NODE_TYPE }}
          SERVICES: >-
            {
              "webapp": {
                "image_name": "ghcr.io/sogilis/voogle-webapp:latest",
                "is_private": true,
                "image_user": "${{ secrets.DOCKER_USER }}",
                "image_password": "${{ secrets.DOCKER_TOKEN }}",
                "instances": "1",
                "network_rules": [{
                  "path_prefix": "/"
                }]
              },
              "api": {
                "image_name": "ghcr.io/sogilis/voogle-api:latest",
                "is_private": true,
                "image_user": "${{ secrets.DOCKER_USER }}",
                "image_password": "${{ secrets.DOCKER_TOKEN }}",
                "instances": "1",
                "network_rules": [{
                  "internal_port": "4444",
                  "path_prefix": "/api/v1/"
                }],
                "env": {
                  "PORT": "4444",
                  "USER_AUTH": "${{ secrets.API_USER }}",
                  "PWD_AUTH": "${{ secrets.API_PWD }}",
                  "S3_AUTH_KEY": "${{ secrets.S3_AUTH_KEY }}",
                  "S3_AUTH_PWD": "${{ secrets.S3_AUTH_PWD }}",
                  "RABBITMQ_ADDR": "rabbitmq-server.service.consul",
                  "RABBITMQ_USER": "${{ secrets.RABBITMQ_DEFAULT_USER }}",
                  "RABBITMQ_PWD": "${{ secrets.RABBITMQ_DEFAULT_PASS }}"
                }
              },
              "encoder": {
                "image_name": "ghcr.io/sogilis/voogle-encoder:latest",
                "is_private": true,
                "image_user": "${{ secrets.DOCKER_USER }}",
                "image_password": "${{ secrets.DOCKER_TOKEN }}",
                "instances": "2",
                "env": {
                  "S3_AUTH_KEY": "${{ secrets.S3_AUTH_KEY }}",
                  "S3_AUTH_PWD": "${{ secrets.S3_AUTH_PWD }}",
                  "RABBITMQ_ADDR": "rabbitmq-server.service.consul",
                  "RABBITMQ_USER": "${{ secrets.RABBITMQ_DEFAULT_USER }}",
                  "RABBITMQ_PWD": "${{ secrets.RABBITMQ_DEFAULT_PASS }}"
                }
              },
              "rabbitmq-server": {
                "image_name": "rabbitmq:3.9",
                "instances": "1",
                "env": {
                  "RABBITMQ_DEFAULT_USER": "${{ secrets.RABBITMQ_DEFAULT_USER }}",
                  "RABBITMQ_DEFAULT_PASS": "${{ secrets.RABBITMQ_DEFAULT_PASS }}"
                }
              }
            }
