// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: v1/transformer.proto

package transformer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformerServiceClient is the client API for TransformerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformerServiceClient interface {
	// Obtains the feature at a given position.
	TransformVideo(ctx context.Context, in *TransformVideoRequest, opts ...grpc.CallOption) (TransformerService_TransformVideoClient, error)
}

type transformerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformerServiceClient(cc grpc.ClientConnInterface) TransformerServiceClient {
	return &transformerServiceClient{cc}
}

func (c *transformerServiceClient) TransformVideo(ctx context.Context, in *TransformVideoRequest, opts ...grpc.CallOption) (TransformerService_TransformVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransformerService_ServiceDesc.Streams[0], "/pkg.transformer.v1.TransformerService/TransformVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &transformerServiceTransformVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransformerService_TransformVideoClient interface {
	Recv() (*TransformVideoResponse, error)
	grpc.ClientStream
}

type transformerServiceTransformVideoClient struct {
	grpc.ClientStream
}

func (x *transformerServiceTransformVideoClient) Recv() (*TransformVideoResponse, error) {
	m := new(TransformVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransformerServiceServer is the server API for TransformerService service.
// All implementations must embed UnimplementedTransformerServiceServer
// for forward compatibility
type TransformerServiceServer interface {
	// Obtains the feature at a given position.
	TransformVideo(*TransformVideoRequest, TransformerService_TransformVideoServer) error
	mustEmbedUnimplementedTransformerServiceServer()
}

// UnimplementedTransformerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransformerServiceServer struct {
}

func (UnimplementedTransformerServiceServer) TransformVideo(*TransformVideoRequest, TransformerService_TransformVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformVideo not implemented")
}
func (UnimplementedTransformerServiceServer) mustEmbedUnimplementedTransformerServiceServer() {}

// UnsafeTransformerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformerServiceServer will
// result in compilation errors.
type UnsafeTransformerServiceServer interface {
	mustEmbedUnimplementedTransformerServiceServer()
}

func RegisterTransformerServiceServer(s grpc.ServiceRegistrar, srv TransformerServiceServer) {
	s.RegisterService(&TransformerService_ServiceDesc, srv)
}

func _TransformerService_TransformVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransformVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransformerServiceServer).TransformVideo(m, &transformerServiceTransformVideoServer{stream})
}

type TransformerService_TransformVideoServer interface {
	Send(*TransformVideoResponse) error
	grpc.ServerStream
}

type transformerServiceTransformVideoServer struct {
	grpc.ServerStream
}

func (x *transformerServiceTransformVideoServer) Send(m *TransformVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TransformerService_ServiceDesc is the grpc.ServiceDesc for TransformerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.transformer.v1.TransformerService",
	HandlerType: (*TransformerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransformVideo",
			Handler:       _TransformerService_TransformVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/transformer.proto",
}
